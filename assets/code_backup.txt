width = 18
height = 16
plt.figure(figsize=(width, height))
plt.imshow(img, extent = [0, 900, 0, 800])
# K-Means scatter plot
colors = ['blue', 'green', 'red', 'black', 'yellow', 'brown', 'pink', 'grey', 'orange']
for i in range(0, 500):
    X = random.uniform(city_detail[0], city_detail[1])
    Y = random.uniform(city_detail[2], city_detail[3])
    if (kmeans.labels_[i] == 0):
        plta = plt.scatter(x = X, y = Y, color = colors[0], s = 2)
    elif (kmeans.labels_[i] == 1):
        pltb = plt.scatter(x = X, y = Y, color = colors[1], s = 2)
    elif (kmeans.labels_[i] == 2):
        pltc = plt.scatter(x = X, y = Y, color = colors[2], s = 2)
    elif (kmeans.labels_[i] == 3):
        pltd = plt.scatter(x = X, y = Y, color = colors[3], s = 2)
    elif (kmeans.labels_[i] == 4):
        plte = plt.scatter(x = X, y = Y, color = colors[4], s = 2)
    elif (kmeans.labels_[i] == 5):
        pltf = plt.scatter(x = X, y = Y, color = colors[5], s = 2)
    elif (kmeans.labels_[i] == 6):
        pltg = plt.scatter(x = X, y = Y, color = colors[6], s = 2)
    elif (kmeans.labels_[i] == 7):
        plth = plt.scatter(x = X, y = Y, color = colors[7], s = 2)
    elif (kmeans.labels_[i] == 8):
        plti = plt.scatter(x = X, y = Y, color = colors[8], s = 2)
# plt.scatter(x = 1200, y = 1200, s=0)
plt.legend((plta, pltb, pltc, pltd, plte, pltf, pltg, plth, plti), 
           (terms[order_centroids[0, 0]], 
            terms[order_centroids[1, 0]], 
            terms[order_centroids[2, 0]], 
            terms[order_centroids[3, 0]],
            terms[order_centroids[4, 0]],
            terms[order_centroids[5, 0]],
            terms[order_centroids[6, 1]],
            terms[order_centroids[7, 0]],
            terms[order_centroids[8, 0]]))